Follow-Up Prompt for Replit Agent
text

Collapse

Wrap

Copy
I previously asked you to refactor my `ComparisonTable.tsx` file to create a reusable `FeatureTooltip` component for handling tooltips dynamically across all wallet features, using wallet JSON data and translations from `en.json`. You created `FeatureTooltip.tsx` and updated `ComparisonTable.tsx`, but the result didn’t fully meet my requirements. Specifically:

- The `FeatureTooltip` component still contains hardcoded wallet-specific logic (e.g., conditions for "Blink", "Phoenix", "Bitkit") and is limited to the "availability" feature, making it not reusable across all features.
- I wanted a solution that eliminates all wallet-specific conditional logic and dynamically constructs translation keys (e.g., `limited_bitkit`) to fetch tooltips from `en.json`, without tying it to specific wallet names or features in the code.

Here’s what I need you to do now:

1. **Fix `FeatureTooltip.tsx`**:
   - Update the existing `FeatureTooltip.tsx` file.
   - Remove all hardcoded conditional logic (e.g., `if (wallet && featureName === 'availability')`, checks for specific wallet names like "Bitkit").
   - Make it reusable for any feature by:
     - Keeping the `normalizeKey` function to convert values or customText (e.g., "Limited (LSP)" → "limited_lsp").
     - Constructing a base translation key: `featureStatus.values.${normalizedKey}`.
     - If a `wallet` is provided, also construct a wallet-specific key: `featureStatus.values.${normalizedKey}_${wallet.name.toLowerCase().replace(/\s+/g, '_')}` (e.g., `limited_bitkit`).
     - Use the `t` function to look up the tooltip text, prioritizing the wallet-specific key (if available), then the base key, then falling back to `displayValue`.
   - Keep the `div` with `cursor-help`, `title`, and `data-tooltip` attributes, but ensure the tooltip text is purely driven by the translation lookup.

2. **Keep `ComparisonTable.tsx` as is**:
   - The integration of `FeatureTooltip` in `renderFeatureStatus` is already correct (it passes `featureName`, `value`, `customText`, and `wallet`). No changes are needed there unless you see issues caused by the current `FeatureTooltip`.

3. **Goals**:
   - Ensure `FeatureTooltip` works for any feature (e.g., `availability`, `kyc`, `transactionLimits`), not just `availability`.
   - Remove all wallet-specific `if` conditions, making it scalable so new wallets or features only require updates to `en.json`.
   - Rely entirely on `en.json` for tooltip content, using dynamic keys like `limited_bitkit` or `yes_github` when a wallet is provided.

Here’s the current `FeatureTooltip.tsx` you created:

```tsx
import React from 'react';
import { Wallet } from '@/lib/types';
import { useLanguage } from '@/hooks/use-language';

interface FeatureTooltipProps {
  featureName?: string;
  value: string;
  customText?: string;
  wallet?: Wallet;
  children: React.ReactNode;
}

const FeatureTooltip = ({ 
  featureName, 
  value, 
  customText, 
  wallet, 
  children 
}: FeatureTooltipProps) => {
  const { t } = useLanguage();
  
  const normalizeKey = (key: string): string => {
    return key
      .trim()
      .toLowerCase()
      .replace(/[^\w\s]/g, '')
      .replace(/\s+/g, '_');
  };
  
  const displayValue = (value === 'custom' && customText) ? customText : value;
  const normalizedKey = normalizeKey(displayValue);
  
  let tooltipText = '';
  let tooltipLabel = '';
  
  if (wallet && featureName === 'availability') {
    if (value === 'limited') {
      if (['Blink', 'Phoenix', 'Wallet of Satoshi'].includes(wallet.name)) {
        tooltipLabel = t(`featureStatus.values.limited_blink_phoenix_wos.label`, undefined, '');
        tooltipText = t(`featureStatus.values.limited_blink_phoenix_wos.title`, undefined, '');
      } else if (wallet.name === 'Bitkit') {
        tooltipLabel = t(`featureStatus.values.limited_bitkit.label`, undefined, '');
        tooltipText = t(`featureStatus.values.limited_bitkit.title`, undefined, '');
      }
    }
  }
  
  if (!tooltipText) {
    const translationKey = `featureStatus.values.${normalizedKey}`;
    tooltipText = t(`${translationKey}.title`, undefined, displayValue);
    tooltipLabel = t(`${translationKey}.label`, undefined, displayValue);
  }

  return (
    <div
      className="inline-flex items-center justify-center cursor-help"
      title={tooltipText}
      data-tooltip={tooltipText}
    >
      {children}
    </div>
  );
};

export default FeatureTooltip;
Here’s an example of what I expect the fixed version to look like:

tsx

Collapse

Wrap

Copy
import React from 'react';
import { Wallet } from '@/lib/types';
import { useLanguage } from '@/hooks/use-language';

interface FeatureTooltipProps {
  featureName?: string;
  value: string;
  customText?: string;
  wallet?: Wallet;
  children: React.ReactNode;
}

const FeatureTooltip = ({ featureName, value, customText, wallet, children }: FeatureTooltipProps) => {
  const { t } = useLanguage();

  const normalizeKey = (key: string): string => {
    return key.trim().toLowerCase().replace(/[^\w\s]/g, '').replace(/\s+/g, '_');
  };

  const displayValue = value === 'custom' && customText ? customText : value;
  const normalizedKey = normalizeKey(displayValue);

  const baseKey = `featureStatus.values.${normalizedKey}`;
  const walletKey = wallet ? `featureStatus.values.${normalizedKey}_${wallet.name.toLowerCase().replace(/\s+/g, '_')}` : '';

  const tooltipText = wallet
    ? t(walletKey + '.title', undefined, t(baseKey + '.title', undefined, displayValue))
    : t(baseKey + '.title', undefined, displayValue);

  return (
    <div className="inline-flex items-center justify-center cursor-help" title={tooltipText} data-tooltip={tooltipText}>
      {children}
    </div>
  );
};

export default FeatureTooltip;
Here’s an example wallet JSON (bitkit.json) for context:

json

Collapse

Wrap

Copy
{
  "name": "Bitkit",
  "website": "https://bitkit.to",
  "description": "Self-custodial Bitcoin and Lightning wallet",
  "type": "lightning",
  "features": {
    "availability": { "value": "custom", "customText": "Limited (LSP)" },
    "kyc": "no",
    "transactionLimits": { "value": "custom", "customText": "999$ MAX with default LSP" }
  }
}
And relevant en.json entries:

json

Collapse

Wrap

Copy
{
  "featureStatus": {
    "values": {
      "limited": { "label": "Limited", "title": "Limited availability in some regions" },
      "limited_bitkit": {
        "label": "Limited (LSP)",
        "title": "The Blocktank Lightning Service Provider (LSP) is restricted in the United States and Canada. Bitkit is standardly available in the app store."
      },
      "limited_blink_phoenix_wos": {
        "label": "Limited",
        "title": "Restricted in the United States, and small / sanctioned countries."
      },
      "no": { "label": "No", "title": "Feature not supported" }
    }
  }
}
Please update FeatureTooltip.tsx to match the expected behavior, test it with the provided wallet data, and ensure it works for all features (not just availability). Let me know if you need more details!

text

Collapse

Wrap

Copy

---

### Instructions for Use
1. Copy this prompt into the Replit Agent’s input area.
2. Ensure the agent has access to your project files (`ComparisonTable.tsx`, `FeatureTooltip.tsx`, etc.).
3. Run the agent and review the updated `FeatureTooltip.tsx`.
4. Test the changes with sample wallets (e.g., Bitkit, Blink) to confirm tooltips are dynamically pulled from `en.json` without hardcoded logic.

This prompt provides clear instructions, the current flawed code, the desired fixed version, and context to guide the agent to a fully dynamic, reusable solution. Let me know if you’d like further refinements!