Task: Refactor the renderFeatureStatus function in ./src/components/ComparisonTable.tsx to provide a blanket translation solution for all feature values, based on the provided CSV data. Remove all special cases (e.g., Channel Management, Platform, implementation, walletType) and treat every value uniformly, ensuring consistent translation using the t() function from useLanguage for both display text and tooltips. The current function only translates specific 'custom' patterns (e.g., "Yes (GitHub)"), leaving other values (e.g., "Yes", "Detailed", "Seed Phrase + SCB") inconsistent or untranslated.

Context:

File: ./src/components/ComparisonTable.tsx.
Translation files: ./src/locales/en.json and ./src/locales/es.json.
Uses useLanguage with t(key: string) for translations based on language ('en' or 'es').
CSV data shows diverse values: "Yes", "No", "Detailed", "Yes, dynamic LSP fees", "P2TR, P2WPKH", "Seed Phrase + SCB", etc., indicating no need for special cases.
Issue: Special cases fragment the logic; all values should be handled the same way.
Requirements:

Uniform Translation:
Remove all special case if conditions (e.g., Channel Management, Platform, implementation, walletType).
Use t() for all display text and tooltips, normalizing every value (and customText if present) into a translation key (e.g., "Yes" â†’ featureStatus.yes.label).
Fall back to the raw value or customText if no translation exists.
Handle All Values:
Support simple values (e.g., "Yes", "No"), descriptive strings (e.g., "Yes, dynamic LSP fees"), and lists (e.g., "P2TR, P2WPKH") uniformly.
Use customText as the primary display value when provided, otherwise use value.
Translation Files:
Update en.json and es.json with keys for all feature values under featureStatus, including label (display text) and title (tooltip). Example: featureStatus.yes.label, featureStatus.seed_phrase_+_scb.title.
Consistency:
Replace hardcoded display text (e.g., "P", "O") with translated values via t().
Preserve styling logic (e.g., icons for "yes", orange background for "custom") but source text from translations.
Preserve UI:
Maintain existing styles (e.g., bg-primary/20 for "yes", bg-orange-100 for "custom") and icons, applying them based on value type.
Keep tooltip (title) and display text separation.
Scalability:
Ensure the solution works for any new value added to the CSV without code changes, only requiring translation file updates.
Output:

Updated renderFeatureStatus function for ./src/components/ComparisonTable.tsx.
Updated ./src/locales/en.json and ./src/locales/es.json with keys for a representative set of CSV values (e.g., "Yes", "No", "Detailed", "Yes (GitHub)", "Seed Phrase + SCB").
Brief explanation and instructions for adding new translations.
Instructions:

Refactor renderFeatureStatus to remove all if conditions for special cases, keeping only the switch block.
Normalize value and customText into translation keys (e.g., replace spaces with underscores, lowercase).
Use a helper to fetch translations with fallback (e.g., t('key') or raw value if key missing).
Test with CSV values like "Yes", "No", "Yes (GitHub)", "P2TR, P2WPKH", "Seed Phrase + SCB".
Date: March 30, 2025.
Please proceed and provide the updated function, translation files, and explanation.