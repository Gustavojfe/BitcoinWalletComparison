Prompt for Replit Agent (Next Step)
text

Collapse

Wrap

Copy
I asked you to update `FeatureTooltip.tsx` to create a fully reusable, data-driven tooltip component that works across all wallet features, relying on dynamic translation keys from `en.json` without hardcoded wallet-specific logic. You updated the file, and it’s close to what I want, but there’s still a problem:

- The updated `FeatureTooltip.tsx` includes hardcoded logic for a group of wallets (`if (['Blink', 'Phoenix', 'Wallet of Satoshi'].includes(wallet.name) && normalizedKey === 'limited')`). This defeats my goal of eliminating all wallet-specific conditional logic in the code and making it fully scalable via `en.json`.
- I want shared tooltips (like for "Blink", "Phoenix", and "Wallet of Satoshi") to be handled in `en.json` by defining identical translations for each wallet-specific key (e.g., `limited_blink`, `limited_phoenix`, `limited_wallet_of_satoshi`), not by hardcoding a group check in the component.

Here’s what I need you to do:

1. **Update `FeatureTooltip.tsx`**:
   - Modify the existing `FeatureTooltip.tsx` file.
   - Remove the hardcoded condition for "Blink", "Phoenix", and "Wallet of Satoshi" (i.e., delete the `if (['Blink', 'Phoenix', 'Wallet of Satoshi'].includes(wallet.name) && normalizedKey === 'limited')` block).
   - Simplify the wallet-specific key generation to always use `featureStatus.values.${normalizedKey}_${normalizedWalletName}` when a wallet is provided, without exceptions. For example:
     - For Bitkit with "Limited (LSP)" → `featureStatus.values.limited_lsp_bitkit`
     - For Blink with "limited" → `featureStatus.values.limited_blink`
   - Keep the logic that prioritizes wallet-specific keys over base keys, falling back to `displayValue`.
   - Update the comment block to clarify that shared tooltips should be managed in `en.json` by duplicating translations as needed (e.g., `limited_blink`, `limited_phoenix`, and `limited_wallet_of_satoshi` can all have the same `title`).

2. **Goal**:
   - Ensure the component has no wallet-specific or feature-specific conditional logic, making it fully reusable and scalable. Adding a new wallet with a shared tooltip should only require updating `en.json`, not the code.

Here’s the current `FeatureTooltip.tsx`:

```tsx
import React from 'react';
import { Wallet } from '@/lib/types';
import { useLanguage } from '@/hooks/use-language';

interface FeatureTooltipProps {
  featureName?: string;
  value: string;
  customText?: string;
  wallet?: Wallet;
  children: React.ReactNode;
}

const FeatureTooltip = ({ 
  featureName, 
  value, 
  customText, 
  wallet, 
  children 
}: FeatureTooltipProps) => {
  const { t } = useLanguage();
  
  const normalizeKey = (key: string): string => {
    return key
      .trim()
      .toLowerCase()
      .replace(/[^\w\s]/g, '')
      .replace(/\s+/g, '_');
  };
  
  const displayValue = (value === 'custom' && customText) ? customText : value;
  const normalizedKey = normalizeKey(displayValue);
  
  const baseKey = `featureStatus.values.${normalizedKey}`;
  
  let walletSpecificKey = '';
  if (wallet) {
    if (['Blink', 'Phoenix', 'Wallet of Satoshi'].includes(wallet.name) && normalizedKey === 'limited') {
      walletSpecificKey = `featureStatus.values.limited_blink_phoenix_wos`;
    } else {
      const normalizedWalletName = normalizeKey(wallet.name);
      walletSpecificKey = `featureStatus.values.${normalizedKey}_${normalizedWalletName}`;
    }
  }
  
  const tooltipText = walletSpecificKey
    ? t(`${walletSpecificKey}.title`, undefined, t(`${baseKey}.title`, undefined, displayValue))
    : t(`${baseKey}.title`, undefined, displayValue);

  return (
    <div
      className="inline-flex items-center justify-center cursor-help"
      title={tooltipText}
      data-tooltip={tooltipText}
    >
      {children}
    </div>
  );
};

export default FeatureTooltip;
Here’s what I expect the fixed version to look like:

tsx

Collapse

Wrap

Copy
import React from 'react';
import { Wallet } from '@/lib/types';
import { useLanguage } from '@/hooks/use-language';

interface FeatureTooltipProps {
  featureName?: string;
  value: string;
  customText?: string;
  wallet?: Wallet;
  children: React.ReactNode;
}

/**
 * FeatureTooltip Component
 * 
 * Provides consistent tooltip handling for feature values across the application.
 * This component normalizes feature values and looks up translations in a consistent way.
 * It dynamically constructs translation keys based on:
 * 1. Base key: featureStatus.values.{normalizedValue}
 * 2. Wallet-specific key: featureStatus.values.{normalizedValue}_{normalized_wallet_name} (if wallet provided)
 * 
 * Wallet-specific keys take precedence over base keys. For wallets sharing the same tooltip
 * (e.g., "Blink", "Phoenix", "Wallet of Satoshi"), identical translations should be defined
 * in en.json for each wallet-specific key (e.g., limited_blink, limited_phoenix, etc.).
 */
const FeatureTooltip = ({ 
  featureName, 
  value, 
  customText, 
  wallet, 
  children 
}: FeatureTooltipProps) => {
  const { t } = useLanguage();
  
  const normalizeKey = (key: string): string => {
    return key
      .trim()
      .toLowerCase()
      .replace(/[^\w\s]/g, '')
      .replace(/\s+/g, '_');
  };
  
  const displayValue = (value === 'custom' && customText) ? customText : value;
  const normalizedKey = normalizeKey(displayValue);
  
  const baseKey = `featureStatus.values.${normalizedKey}`;
  const walletSpecificKey = wallet 
    ? `featureStatus.values.${normalizedKey}_${normalizeKey(wallet.name)}`
    : '';
  
  const tooltipText = walletSpecificKey
    ? t(`${walletSpecificKey}.title`, undefined, t(`${baseKey}.title`, undefined, displayValue))
    : t(`${baseKey}.title`, undefined, displayValue);

  return (
    <div
      className="inline-flex items-center justify-center cursor-help"
      title={tooltipText}
      data-tooltip={tooltipText}
    >
      {children}
    </div>
  );
};

export default FeatureTooltip;
And an example update to en.json to handle shared tooltips:

json

Collapse

Wrap

Copy
{
  "featureStatus": {
    "values": {
      "limited": { "label": "Limited", "title": "Limited availability in some regions" },
      "limited_bitkit": {
        "label": "Limited (LSP)",
        "title": "The Blocktank Lightning Service Provider (LSP) is restricted in the United States and Canada. Bitkit is standardly available in the app store."
      },
      "limited_blink": {
        "label": "Limited",
        "title": "Restricted in the United States, and small / sanctioned countries."
      },
      "limited_phoenix": {
        "label": "Limited",
        "title": "Restricted in the United States, and small / sanctioned countries."
      },
      "limited_wallet_of_satoshi": {
        "label": "Limited",
        "title": "Restricted in the United States, and small / sanctioned countries."
      }
    }
  }
}
Please update FeatureTooltip.tsx to remove the remaining hardcoded logic, test it with wallets like Bitkit and Blink, and ensure it pulls tooltips dynamically from en.json for all features. Let me know if you need further clarification!

text

Collapse

Wrap

Copy

---

### Instructions for Use
1. Copy this prompt into the Replit Agent’s input area.
2. Ensure the agent has access to your `FeatureTooltip.tsx` file.
3. Run the agent and review the updated file.
4. Test with wallets like Bitkit (with `limited_lsp`) and Blink (with `limited`) to confirm the tooltips are correctly sourced from `en.json` without hardcoded exceptions.

This prompt should finally achieve your goal of a fully dynamic, reusable `FeatureTooltip` component! Let me know if you’d like additional adjustments.