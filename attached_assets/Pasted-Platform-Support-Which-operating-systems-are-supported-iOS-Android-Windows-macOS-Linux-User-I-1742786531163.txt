Platform Support
Which operating systems are supported (iOS, Android, Windows, macOS, Linux)?
User Interface (UI/UX)
Is it beginner-friendly, or geared toward advanced users (e.g., CLI vs. GUI)?
Open Source Status
Is the code open source? If so, link to the repository (e.g., GitHub).
Custodial vs. Non-Custodial
Does the wallet give users full control of private keys, or is it custodial?
KYC
Does the wallet require Know Your Customer verification for use?
Transaction Fees
How are fees handled (fixed, configurable, dynamic based on network)?
Transaction Limits
Are there limits on transaction sizes or frequencies?
Backup Options
How are keys and channels backed up (e.g., seed phrase, static channel backup, cloud)?
Moved from 25: Critical for all wallet types—custodial may use cloud, hybrid uses on-chain, non-custodial uses seeds.
Lightning Network Implementation
Which Lightning Network implementation is used (e.g., LND, c-lightning, Eclair)?
Moved from 27: Defines the wallet’s LN backbone—important even for custodial/hybrid users to know compatibility.
Node Type
Does the wallet run a full Lightning node, a light client, or rely on a remote node?
Moved from 28: Key question for understanding wallet architecture, even if abstracted in custodial cases.
Payment and Invoice Features (Core LN Interaction)
BOLT11 Support
Does it support BOLT11 invoices for payments?
BOLT12 Support
Does it support BOLT12 offers (e.g., reusable invoices)?
UMA Support
Does it support Universal Money Addresses (UMA) for cross-platform payments?
Moved from 16 to 13: Follows Lightning Address as an extension.
BOLT12 + HRN (BLIP32) Support
Does it support BOLT12 with Hashed Random Nonces (HRN) per BLIP32?
LNURL Support
Does it support LNURL-auth, LNURL-pay, LNURL-withdraw, etc.?
Lightning Address Support
Does it support human-readable Lightning Addresses (e.g., user@domain.com)?
No-Amount Invoices
Can it generate invoices without a specified amount (open-ended)?
Invoice Expiry Control
Can users customize invoice expiration times?
Custom Invoice Metadata
Can users add custom metadata to invoices (e.g., for merchant tracking or descriptions)?
Offline Receiving (Non-Custodial)
Can the wallet receive payments while offline (e.g., via LNURL, async payments, non-custodially)?
Moved from 26: Fits as a receiving-related feature, though less relevant for custodial wallets.
On-Chain and Hybrid Features (Bitcoin/Liquid Integration)
On-Chain Integration
Can the wallet handle on-chain Bitcoin transactions alongside Lightning?
Separate LN / On-Chain Balances
Are Lightning and on-chain balances tracked distinctly in the UI?
Bitcoin Address Type
Which Bitcoin address types can it generate (e.g., SegWit bech32, Taproot bech32m, Legacy)?
Taproot Transactions
Can it send to and receive from Taproot addresses (e.g., Schnorr signatures supported)?
Submarine Swaps
Are submarine swaps supported for seamless on-chain ↔ Lightning conversion?
Swap-in Potentiam (SIP)
Does it allow potential swaps for future liquidity (e.g., pre-arranged conversions)?
Privacy and Security Features
Tor
Does it support Tor or onion routing for privacy?
Payment Decorrelation
Does it implement techniques to prevent payment correlation (e.g., random delays, dummy hops)?
Channel and Node Management (Non-Custodial/LSP-Assisted)
Channel Management
Can users open/close channels manually, or is it automated?
Inbound Liquidity
Can users manage inbound capacity (e.g., swaps, channel opening)?
Rebalancing Tools
Are there tools to rebalance channel liquidity?
Maximum Channel Capacity
What’s the largest payment/channel size supported?
Number of Confirmations to Channel Usability
How many on-chain confirmations are needed before a channel is usable?
Dual-Funded Channels
Can channels be dual-funded (both parties contribute funds) for better liquidity?
Splicing Support
Does it allow splicing (adding/removing funds from channels without closing them)?
Zero-Conf Channels
Does it support zero-confirmation channels for instant usability?
Private vs. Public Channels
Can users choose between private (unannounced) and public (routable) channels?
Lightning Service Provider (LSP) Integration
Does it rely on or integrate with LSPs for simplified node management?
Hub Connectivity
Does it connect to specific hubs, or is it fully decentralized?
Watchtower Integration
Is there built-in support for watchtowers to prevent channel fraud?
Peer Backup Options
Can channel states be backed up with trusted peers instead of centralized services?
Force-Close Handling
How does it manage force-closed channels (e.g., penalty transactions, recovery options)?
State Channel Recovery
Are there mechanisms to recover lost channel states (e.g., from corrupted data)?
Advanced/Technical Features (Niche or Emerging)
MPP
Does it support Multi-Path Payments (e.g., AMP)?
JIT Routing
Does it support Just-In-Time routing to dynamically adjust liquidity during payments?
Trampoline Payments
Can it use trampoline nodes to simplify routing for lightweight clients?
Dynamic Fee Bumping
Does it support RBF (Replace-By-Fee) or CPFP (Child-Pays-For-Parent) for stuck transactions?
Channel Liquidity Ads
Does it support advertising available liquidity to other nodes (e.g., via BOLT 14)?
Stuckless Payments
Does it support stuckless payment proposals to avoid HTLC timeouts?
HODL Invoices
Does it allow "HODL invoices" where payment is held until a condition is met?
Stateless Invoices
Does it support stateless invoices that don’t require server-side storage?
Simple Taproot Channels
Does it support Taproot-optimized Lightning channels?
Taproot Assets
Can it handle Taproot-based assets beyond BTC on Lightning?
CLTV Expiry Delta Custom
Can users set custom CheckLockTimeVerify (CLTV) deltas per channel?
Advanced Channel Outputs
Does it support V3 commitments, ephemeral anchors, or anchor outputs?
Testnet Support
Can it connect to Bitcoin/Lightning testnet for development or experimentation?
Developer APIs/SDKs
Are there APIs or SDKs available for integration into other apps?

